version: "3"

# vars:
#   SHELL:
#     sh: bash
#     windows: powershell.exe -NoProfile -ExecutionPolicy Bypass -Command

tasks:
  default:
    silent: true
    cmds:
      - task --list

  install:darwin:
    cmds:
      - cmd: |
          if command -v brew &>/dev/null; then
            for package in {{.PACKAGE}}; do
              read repo package_name <<< ${package/\// }
              args=""
              [ -z "$package_name" ] && package_name=$repo
              [ -z "$package_name" ] && args="--$repo"
              if {{if .FORCE}}[ 1 -eq 1 ]{{else}}! brew list $args $package &>/dev/null{{end}}; then
                brew install $args{{if .FORCE}} --force{{end}} $package_name
              else
                echo $package already installed
              fi
            done
          fi
        platforms: [darwin]
      - cmd: echo "'brew' is only available on MacOS"
        platforms: [linux, windows]
    desc: Install a Package under Darwin, using Homebrew
    internal: true
    vars:
      PACKAGE: "{{ .PACKAGE }}"
      FORCE: "{{ .FORCE }}"
      TEST_COMMAND: "{{ .TEST_COMMAND }}"

  install:windows:
    cmds:
      - cmd: |
          powershell.exe -NoProfile -ExecutionPolicy Bypass -Command ' `
            $packageMap = "{{ .PACKAGE }}"; `
            $manager = ""; `
            $package = ""; `
            ("winget,choco,scoop" -split "," | ForEach-Object {
              if (-not $manager -or -not $package) { `
                $manager = $_.Trim(); `
                if (-not (Get-Command $manager -ErrorAction SilentlyContinue)) { `
                  Write-Host "Package manager $manager not found. Moving on." -ForegroundColor Yellow; `
                  $manager = ""; `
                } `
                if ($packageMap -match "${manager}:") { `
                  $packageMap -split ";" | ForEach-Object { `
                    $mapping=$_; `
                    if ($mapping -match "${manager}:") { `
                      $package = $mapping.Replace("${manager}:", "");`
                    } `
                  } `
                } else { `
                  $packageMap -split ";" | ForEach-Object { `
                    $mapping=$_; `
                    if (-not ($mapping -match ":")) { `
                      $package = $mapping; `
                    } `
                  } `
                } `
                if ($package) { `
                  Write-Host "Using $manager package manager to install $package" -ForegroundColor Blue; `
                } `
              } `
            }); `
            $installCommands = @{ `
              "winget" = @{ `
                check = { param($pkg) winget list | Select-String -Pattern $pkg }; `
                install = { param($pkg) winget install -e --id $pkg }; `
                forceInstall = { param($pkg) winget install -e --id $pkg --force }; `
              }; `
              "choco" = @{ `
                check = { param($pkg) choco list | Select-String -Pattern $pkg }; `
                install = { param($pkg) choco install -y $pkg }; `
                forceInstall = { param($pkg) choco install -y $pkg --force }; `
              }; `
              "scoop" = @{ `
                check = { param($pkg) scoop list | Select-String -Pattern $pkg }; `
                install = { param($pkg) `
                  $items = $pkg -split "/"; `
                  $bucket = if ($items.Length -gt 1) { $items[0] } else { "main" }; `
                  scoop bucket add $bucket; `
                  scoop install $pkg; `
                }; `
              }; `
            }; `
            if ($installCommands.ContainsKey($manager)) { `
              $cmd = $installCommands[$manager]; `
              {{if .FORCE}}& $cmd.forceInstall $package{{else}}if (-not (& $cmd.check $package)) { `
                Write-Host "Installing $package using $manager" -ForegroundColor Blue; `
                & $cmd.install $package; `
              } else { `
                Write-Host "$package already installed" -ForegroundColor Yellow; `
              }{{end}} `
            } `
          '
        platforms: [windows]
      - cmd: |
          {{if .TEST_COMMAND}}{{.TEST_COMMAND}}{{else}}Write-Host ""{{end}}
        platforms: [windows]
      - cmd: echo "Windows installers are not available on Darwin or Linux"
        platforms: [darwin, linux]
    desc: Install a Package under Windows
    internal: true
    vars:
      PACKAGE: "{{ .PACKAGE }}"
      FORCE: "{{ .FORCE }}"
      TEST_COMMAND: "{{ .TEST_COMMAND }}"
