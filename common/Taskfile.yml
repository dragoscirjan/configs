version: "3"

# vars:
#   SHELL:
#     sh: bash
#     windows: powershell.exe -NoProfile -ExecutionPolicy Bypass -Command

tasks:
  default:
    silent: true
    cmds:
      - task --list

  install:brew:
    desc: Install a package using Homebrew if not installed
    vars:
      PACKAGE: "{{.PACKAGE}}" # Package name passed dynamically
    cmds:
      - cmd: |
          if command -v brew &>/dev/null && ! brew list --cask {{.PACKAGE}} &>/dev/null; then
            brew install {{.PACKAGE}}
          fi
        platforms: [darwin]

  install:snap:
    desc: Install a package using Snap if not installed
    vars:
      PACKAGE: "{{.PACKAGE}}"
    cmds:
      - cmd: |
          if command -v snap &>/dev/null && ! snap list | grep -q clion; then
            sudo snap install {{.PACKAGE}} --classic
          fi
        platforms: [darwin]

  install:windows:
    cmds:
      - cmd: |
          powershell.exe -NoProfile -ExecutionPolicy Bypass -Command ' `
            $packageMap = "{{ .PACKAGE }}"; `
            $manager = ""; `
            $package = ""; `
            ("winget,choco,scoop" -split "," | ForEach-Object {
              if (-not $manager -or -not $package) { `
                $manager = $_.Trim(); `
                if (-not (Get-Command $manager -ErrorAction SilentlyContinue)) { `
                  Write-Host "Package manager $manager not found. Moving on." -ForegroundColor Yellow; `
                  $manager = ""; `
                } `
                if ($packageMap -match "${manager}:") { `
                  $packageMap -split ";" | ForEach-Object { `
                    $mapping=$_; `
                    if ($mapping -match "${manager}:") { `
                      $package = $mapping.Replace("${manager}:", "");`
                    } `
                  } `
                } else { `
                  $packageMap -split ";" | ForEach-Object { `
                    $mapping=$_; `
                    if (-not ($mapping -match ":")) { `
                      $package = $mapping; `
                    } `
                  } `
                } `
                if ($package) { `
                  Write-Host "Using $manager package manager to install $package" -ForegroundColor Blue; `
                } `
              } `
            }); `
            $installCommands = @{ `
              "winget" = @{ `
                check = { param($pkg) winget list | Select-String -Pattern $pkg }; `
                install = { param($pkg) winget install -e --id $pkg }; `
                forceInstall = { param($pkg) winget install -e --id $pkg --force }; `
              }; `
              "choco" = @{ `
                check = { param($pkg) choco list | Select-String -Pattern $pkg }; `
                install = { param($pkg) choco install -y $pkg }; `
                forceInstall = { param($pkg) choco install -y $pkg --force }; `
              }; `
              "scoop" = @{ `
                check = { param($pkg) scoop list | Select-String -Pattern $pkg }; `
                install = { param($pkg) `
                  $items = $pkg -split "/"; `
                  $bucket = if ($items.Length -gt 1) { $items[0] } else { "main" }; `
                  scoop bucket add $bucket; `
                  scoop install $pkg; `
                }; `
              }; `
            }; `
            if ($installCommands.ContainsKey($manager)) { `
              $cmd = $installCommands[$manager]; `
              {{if .FORCE}}& $cmd.forceInstall $package{{else}}if (-not (& $cmd.check $package)) { `
                Write-Host "Installing $package using $manager" -ForegroundColor Blue; `
                & $cmd.install $package; `
              } else { `
                Write-Host "$package already installed" -ForegroundColor Yellow; `
              }{{end}} `
            } `
          '
        platforms: [windows]
      - cmd: |
          {{if .TEST_COMMAND}}{{.TEST_COMMAND}}{{else}}Write-Host ""{{end}}
        platforms: [windows]
    desc: Install a Package under Windows
    internal: true
    vars:
      PACKAGE: "{{ .PACKAGE }}"
      FORCE: "{{ .FORCE }}"
      TEST_COMMAND: "{{ .TEST_COMMAND }}"

  #   # if (Get-Command choco -ErrorAction SilentlyContinue) {
  #   #   if (!(choco list --local-only | Select-String -Pattern 'clion')) {
  #   #     choco install clion-ide -y
  #   #   }
  #   # }
# scoop bucket add extras && scoop install extras/clion
